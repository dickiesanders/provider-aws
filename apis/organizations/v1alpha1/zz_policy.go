/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// PolicyParameters defines the desired state of Policy
type PolicyParameters struct {
	// Region is which region the Policy will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The policy text content to add to the new policy. The text that you supply
	// must adhere to the rules of the policy type you specify in the Type parameter.
	// +kubebuilder:validation:Required
	Content *string `json:"content"`
	// An optional description to assign to the policy.
	// +kubebuilder:validation:Required
	Description *string `json:"description"`
	// The friendly name to assign to the policy.
	//
	// The regex pattern (http://wikipedia.org/wiki/regex) that is used to validate
	// this parameter is a string of any of the characters in the ASCII character
	// range.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// A list of tags that you want to attach to the newly created policy. For each
	// tag in the list, you must specify both a tag key and a value. You can set
	// the value to an empty string, but you can't set it to null. For more information
	// about tagging, see Tagging AWS Organizations resources (https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html)
	// in the AWS Organizations User Guide.
	//
	// If any one of the tags is invalid or if you exceed the allowed number of
	// tags for a policy, then the entire request fails and the policy is not created.
	Tags []*Tag `json:"tags,omitempty"`
	// The type of policy to create. You can specify one of the following values:
	//
	//    * AISERVICES_OPT_OUT_POLICY (https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html)
	//
	//    * BACKUP_POLICY (https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html)
	//
	//    * SERVICE_CONTROL_POLICY (https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html)
	//
	//    * TAG_POLICY (https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html)
	// +kubebuilder:validation:Required
	Type                   *string `json:"type_"`
	CustomPolicyParameters `json:",inline"`
}

// PolicySpec defines the desired state of Policy
type PolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PolicyParameters `json:"forProvider"`
}

// PolicyObservation defines the observed state of Policy
type PolicyObservation struct {
	// A structure that contains additional details about the policy.
	PolicySummary *PolicySummary `json:"policySummary,omitempty"`
}

// PolicyStatus defines the observed state of Policy.
type PolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PolicyObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// Policy is the Schema for the Policies API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicySpec   `json:"spec,omitempty"`
	Status            PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyList contains a list of Policies
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Policy `json:"items"`
}

// Repository type metadata.
var (
	PolicyKind             = "Policy"
	PolicyGroupKind        = schema.GroupKind{Group: Group, Kind: PolicyKind}.String()
	PolicyKindAPIVersion   = PolicyKind + "." + GroupVersion.String()
	PolicyGroupVersionKind = GroupVersion.WithKind(PolicyKind)
)

func init() {
	SchemeBuilder.Register(&Policy{}, &PolicyList{})
}
