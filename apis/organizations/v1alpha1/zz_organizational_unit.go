/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// OrganizationalUnitParameters defines the desired state of OrganizationalUnit
type OrganizationalUnitParameters struct {
	// Region is which region the OrganizationalUnit will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The friendly name to assign to the new OU.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// The unique identifier (ID) of the parent root or OU that you want to create
	// the new OU in.
	//
	// The regex pattern (http://wikipedia.org/wiki/regex) for a parent ID string
	// requires one of the following:
	//
	//    * Root - A string that begins with "r-" followed by from 4 to 32 lowercase
	//    letters or digits.
	//
	//    * Organizational unit (OU) - A string that begins with "ou-" followed
	//    by from 4 to 32 lowercase letters or digits (the ID of the root that the
	//    OU is in). This string is followed by a second "-" dash and from 8 to
	//    32 additional lowercase letters or digits.
	// +kubebuilder:validation:Required
	ParentID *string `json:"parentID"`
	// A list of tags that you want to attach to the newly created OU. For each
	// tag in the list, you must specify both a tag key and a value. You can set
	// the value to an empty string, but you can't set it to null. For more information
	// about tagging, see Tagging AWS Organizations resources (https://docs.aws.amazon.com/organizations/latest/userguide/orgs_tagging.html)
	// in the AWS Organizations User Guide.
	//
	// If any one of the tags is invalid or if you exceed the allowed number of
	// tags for an OU, then the entire request fails and the OU is not created.
	Tags                               []*Tag `json:"tags,omitempty"`
	CustomOrganizationalUnitParameters `json:",inline"`
}

// OrganizationalUnitSpec defines the desired state of OrganizationalUnit
type OrganizationalUnitSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       OrganizationalUnitParameters `json:"forProvider"`
}

// OrganizationalUnitObservation defines the observed state of OrganizationalUnit
type OrganizationalUnitObservation struct {
	// The Amazon Resource Name (ARN) of this OU.
	//
	// For more information about ARNs in Organizations, see ARN Formats Supported
	// by Organizations (https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsorganizations.html#awsorganizations-resources-for-iam-policies)
	// in the AWS Service Authorization Reference.
	ARN *string `json:"arn,omitempty"`
	// The unique identifier (ID) associated with this OU.
	//
	// The regex pattern (http://wikipedia.org/wiki/regex) for an organizational
	// unit ID string requires "ou-" followed by from 4 to 32 lowercase letters
	// or digits (the ID of the root that contains the OU). This string is followed
	// by a second "-" dash and from 8 to 32 additional lowercase letters or digits.
	ID *string `json:"id,omitempty"`
}

// OrganizationalUnitStatus defines the observed state of OrganizationalUnit.
type OrganizationalUnitStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          OrganizationalUnitObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// OrganizationalUnit is the Schema for the OrganizationalUnits API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type OrganizationalUnit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrganizationalUnitSpec   `json:"spec,omitempty"`
	Status            OrganizationalUnitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationalUnitList contains a list of OrganizationalUnits
type OrganizationalUnitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationalUnit `json:"items"`
}

// Repository type metadata.
var (
	OrganizationalUnitKind             = "OrganizationalUnit"
	OrganizationalUnitGroupKind        = schema.GroupKind{Group: Group, Kind: OrganizationalUnitKind}.String()
	OrganizationalUnitKindAPIVersion   = OrganizationalUnitKind + "." + GroupVersion.String()
	OrganizationalUnitGroupVersionKind = GroupVersion.WithKind(OrganizationalUnitKind)
)

func init() {
	SchemeBuilder.Register(&OrganizationalUnit{}, &OrganizationalUnitList{})
}
